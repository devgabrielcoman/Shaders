// this is the vertex normal sent from the vertexshader
varying vec3 vNormal;
// this is the UV sent from the vertexshader
varying vec2 vUV;
// this is the position worldspace
varying vec3 vPositionWorldspace; 

// the uniforms sent directly to fragmentshader
// from the main program
// uniform sampler2D texture1;
uniform sampler2D texture1;
uniform vec3 cameraPos;

//////////////////////////////////////
// @brief: calculates a directional light with
// - ambient
// - diffuse
// - specular 
// components
vec4 directionalLight(){
	vec3 color = vec3(1, 1, 1);
	float ambientIntensity = 0.1;
	vec3 direction = vec3(0.5, 0.2, 1);
	float diffuseIntensity = 0.75;
	float specularIntensity = 1.0;
	float specularPower = 32.0;

	// the three colors
	vec3 ambientColor = ambientIntensity * color;
	vec3 diffuseColor = vec3(0, 0, 0);
	vec3 specularColor = vec3(0, 0, 0);

	float diffuseFactor = dot(vNormal, direction);
	if (diffuseFactor > 0.0){
		diffuseColor = diffuseIntensity * diffuseFactor * color;

		vec3 vertexToEye = normalize(cameraPos - vPositionWorldspace);
		vec3 lightReflect = normalize(reflect(direction, vNormal));
		float specularFactor = dot(vertexToEye, lightReflect);
		specularFactor = pow(specularFactor, specularPower);
		if (specularFactor > 0.0){
			specularColor = specularIntensity * specularFactor * color; 
		}
	}

	return vec4((ambientColor + diffuseColor + specularColor), 1);
}

//////////////////////////////////////
// @brief: calculates a point light with
// - same components as diffuse light
// - also has a position (in world space)
vec4 pointLight(vec3 color, vec3 position){
	// vec3 color = vec3(1, 0.5, 0.2);
	float ambientIntensity = 0.75;
	float diffuseIntensity = 0.95;
	// vec3 position = vec3(5, 1, 0.5);
	float specularIntensity = 1.0;
	float specularPower = 32.0;
	float cstAttn = 0.15;
	float linAttn = 0.05;
	float expAttn = 0.15;
	// calc light direction
	vec3 direction = vPositionWorldspace - position; 
	float Distance = length(direction);
	direction = normalize(direction); 
	// calc total attenuation
	float totalAttenuation = cstAttn + linAttn * Distance + expAttn * Distance * Distance;

	vec3 ambientColor = ambientIntensity * color;
	vec3 diffuseColor = vec3(0, 0, 0);
	vec3 specularColor = vec3(0, 0, 0);

	float diffuseFactor = dot(vNormal, direction);
	if (diffuseFactor > 0.0){
		diffuseColor = diffuseIntensity * diffuseFactor * color;

		vec3 vertexToEye = normalize(cameraPos - vPositionWorldspace);
		vec3 lightReflect = normalize(reflect(direction, vNormal));
		float specularFactor = dot(vertexToEye, lightReflect);
		specularFactor = pow(specularFactor, specularPower);
		if (specularFactor > 0.0){
			specularColor = specularIntensity * specularFactor * color; 
		}
	}

	return vec4((ambientColor + diffuseColor + specularColor) / totalAttenuation, 1);
}

void main() {
	vec4 totalColor = directionalLight() + 
						pointLight(vec3(1.0, 0.5, 0.2), vec3(5.0, -2.0, 0.5)) + 
						pointLight(vec3(0.5, 1, 0.0), vec3(-5.0, -2.0, -7.0));
	gl_FragColor = texture2D(texture1, vUV) * totalColor;
}